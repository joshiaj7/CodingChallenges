"""
Space   : O(n**2)
Time    : O(n**2)

method:
dfs
"""


class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        def dfs(queens, c, diffs, sums):
            q = len(queens)
            if q == n:
                ans.append(queens)
                return
            line = '.' * n
            if q == 0:
                for i in c:
                    dfs(queens + [line[:i] + 'Q' + line[i+1:]],
                        c[:i] + c[i+1:], diffs + [q-i], sums + [q+i])
            else:
                for i, v in enumerate(c):
                    # check left and right diagonal
                    if q-v in diffs or q+v in sums:
                        continue
                    dfs(queens + [line[:v] + 'Q' + line[v+1:]],
                        c[:i] + c[i+1:], diffs + [q-v], sums + [q+v])

        buffers, ans = [], []
        coords = [i for i in range(n)]
        dfs([], coords, [], [])
        return ans


[
    ["Q....", "..Q..", "....Q", ".Q...", "...Q."],
    ["Q....", "...Q.", ".Q...", "....Q", "..Q.."],
    [".Q...", "...Q.", "Q....", "..Q..", "....Q"],
    [".Q...", "...Q.", "Q....", "....Q", "..Q.."],
    [".Q...", "....Q", "..Q..", "Q....", "...Q."],
    ["..Q..", "Q....", "...Q.", ".Q...", "....Q"],
    ["..Q..", "Q....", "....Q", ".Q...", "...Q."],
    ["..Q..", "....Q", "Q....", "...Q.", ".Q..."],
    ["..Q..", "....Q", ".Q...", "...Q.", "Q...."],
    ["...Q.", "Q....", "..Q..", "....Q", ".Q..."],
    ["...Q.", ".Q...", "....Q", "Q....", "..Q.."],
    ["...Q.", ".Q...", "....Q", "..Q..", "Q...."],
    ["....Q", ".Q...", "...Q.", "Q....", "..Q.."],
    ["....Q", "..Q..", "Q....", "...Q.", ".Q..."]
]

[
    ["Q....", "..Q..", "....Q", ".Q...", "...Q."],
    ["Q....", "...Q.", ".Q...", "....Q", "..Q.."],
    [".Q...", "...Q.", "Q....", "..Q..", "....Q"],
    [".Q...", "....Q", "..Q..", "Q....", "...Q."],
    ["..Q..", "Q....", "...Q.", ".Q...", "....Q"],
    ["..Q..", "....Q", ".Q...", "...Q.", "Q...."],
    ["...Q.", "Q....", "..Q..", "....Q", ".Q..."],
    ["...Q.", ".Q...", "....Q", "..Q..", "Q...."],
    ["....Q", ".Q...", "...Q.", "Q....", "..Q.."],
    ["....Q", "..Q..", "Q....", "...Q.", ".Q..."]
]

[
    ".Q...",
    "...Q.",
    "Q....",
    "....Q",
    "..Q.."
],
